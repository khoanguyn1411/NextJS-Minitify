// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Artist {
  id          Int      @id @default(autoincrement())
  biography   String
  imageUrl    String
  songCount   Int
  createdDate DateTime @default(now())
  song        Song[]
  album       Album[]
  updatedAt   DateTime @updatedAt
}

model Song {
  id          Int       @id @default(autoincrement())
  name        String
  playTime    Int
  imageUrl    String
  createdDate DateTime  @default(now())
  duration    Int
  artist      Artist[]
  album       Album?    @relation(fields: [albumId], references: [id])
  albumId     Int?
  playlist    Playlist? @relation(fields: [playlistId], references: [id])
  playlistId  Int?
  updatedAt   DateTime  @updatedAt
}

model Album {
  id          Int      @id @default(autoincrement())
  name        String
  imageUrl    String
  description String
  playTime    Int
  createdDate DateTime @default(now())
  song        Song[]
  artist      Artist   @relation(fields: [artistId], references: [id])
  artistId    Int
  updatedAt   DateTime @updatedAt
}

model Playlist {
  id          Int      @id @default(autoincrement())
  songCount   Int
  description String
  createdDate DateTime @default(now())
  song        Song[]
  updatedAt   DateTime @updatedAt
}

model User {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  password    String
  username    String    @unique
  createdDate DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Session     Session[]
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}
